/*
 * 指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。
 * 就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。
 * 
 * 所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，
 * 都是一样的，都是一个代表内存地址的长的十六进制数。
 * 不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。
 */

int p;  // 这是一个普通的整型变量

int *P; // P与*结合，所以p是一个指针，再与int结合，说明指针所指向的内容类型为int型，
        // 所以P是一个返回整形数据的指针(返回的是地址)。*p返回的是地址的值。

int p[3]; // 首先从P 处开始,先与[] 结合,说明P 是一个数组,然后与int 结合,
          // 说明数组里的元素是整型的, 所以P 是一个由整型数据组成的数组

int *p[3]; // 先从P 处开始,先与[] 结合,因为其优先级比* 高,所以P 是一个数组, 然后再与*结合,
           // 说明数组里的元素是指针类型,然后再与int 结合,说明指针所指向的内容的类型是整型的,
           // 所以P 是一个由返回整型数据的指针所组成的数组

int (*p)[3]; // 首先从P 处开始,先与*结合,说明P 是一个指针, 然后再与[]结合, 说明指针所指向的内容是一个数组
             // 然后再与int 结合, 说明数组里的元素是整型的, 
             // 所以P 是一个指向由整型数据组成的数组的指针。

int **p; // 首先从P 开始,先与*结合,说是P 是一个指针。然后再与* 结合,说明指针所指向的元素是指针，
         // 然后再与int 结合,说明该指针所指向的元素是整型数据。
         // 由于二级指针以及更高级的指针极少用在复杂的类型中,所以后面更复杂的类型我们就不考虑多级指针了, 最多只考虑一级指针。

int Q(int) {}; // 从Q 处起, 先与()结合,说明Q 是一个函数, 然后进入()里分析, 说明该函数有一个整型变量的参数,
               // 然后再与外面的int 结合, 说明函数的返回值是一个整型数据。


int (*q)(int); // 从q 处开始,先与指针结合,说明q 是一个指针,然后与()结合, 说明指针指向的是一个函数。
               // 然后再与()里的int 结合,说明函数有一个int 型的参数, 再与最外层的int 结合,说明函数的返回类型是整型,
               // 所以q 是一个指向有一个整型参数且返回类型为整型的函数的指针


int *(*pp(int))[3]; // 可以先跳过,不看这个类型, 过于复杂。从pp 开始, 先与()结合, 说明pp 是一个函数,
                    // 然后进入()里面, 与int 结合,说明函数有一个整型变量参数, 然后再与外面的*结合, 说明函数返回的是一个指针,
                    // 然后到最外面一层, 先与[]结合, 说明返回的指针指向的是一个数组, 然后再与*结合, 说明数组里的元素是指针, 
                    // 然后再与int 结合,说明指针指向的内容是整型数据。
                    // 所以P 是一个参数为一个整数且返回一个指向由整型指针变量组成的数组的指针变量的函数.